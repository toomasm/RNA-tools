from Bio import SeqIO
import sys



def five_prime_trimmer(input_filename, output_file, five_prime_trimming):
    """
    Program that trims your specifified amount of nucleotides from the 5 prime end of the fastq reads
"""
      
    #The input data path entry and creation of output file for trimmed reads.p
     data_input = open(input_filename, "r")    
    output = open(output_file, "w")

    #Asks you how much nucleotides would you like to trim from 5 prime end (enter an int) and checks if your entry is valid.
    try:
        trimming_number = int(raw_input("How many nucleotides would you like to trim from 5 prime end? Please enter a single number: "))
    except ValueError:
        print "This is not a single number!"
        sys.exit()

    #Just says what the program is about to do. {0} is a placeholder for info behind .format.
    print "This code will now trim {0} nucleotides from the five prime end of all your reads".format(trimming_number)

    #This code parses fastq file and then iterates over every separate read removing x-nucleotides from the 5 prime end.
    for rec in SeqIO.parse(input_filename, "fastq"):
        rec = rec[trimming_number:] #removes needed amount of nucleotides from 5 prime end.
        SeqIO.write(rec, output, "fastq")                              

    data_input.close()
    output.close()

    #shows how many reads there were in the input file and how many reads are in the output file. 

    num_lines = sum(1 for line in open(path_in))
    print "Input file has {0} lines".format(num_lines)
    num_lines = sum(1 for line in open(path_out))
    print "Output file has {0} lines".format(num_lines)
    print "code has finished!"



def three_prime_trimmer(fastq_file):

    """ Program that trims all "A" nucleotides from the 3 prime end of the fastq reads. It removes "A" nucleotides till it reaches a 
    none A nucleotide."""    

    #The input data path entry and creation of output file for trimmed reads.
    path_in = raw_input("Enter the fastq file path ") 
    #data_input = open(path_in, "r")
    path_out = raw_input("Enter the output file name ")
    output = open(path_out, "w")

    #This code at first parses fastq file.
    #Then it starts to iterate backwards over every characater in the read.
    #It counts the number of A nucleotides at the end of the read, removes as many from the 3 prime end and writes the read to a new file.

    for rec in SeqIO.parse(path_in, "fastq"):#iterates over reads.
        count = 0
        for c in rec.seq[::-1]: #Iterates backwards over nucleotides in read.
            if c == "A": #counts the number of "A"-s at the 3 prime end.
                count += 1
            else:
                break
        if count == 0: #assures that the read wont be deleted if no A-s are at the end.
            pass
        else:
            rec = rec[:-count] #removes nucleotides from 3 prime end. if -count is 0 it deletes the read so it has to be atlest 1.
        SeqIO.write(rec, output, "fastq")

    #data_input.close() 
    output.close()

    num_lines = sum(1 for line in open(path_in))
    print "Input file has {0} lines".format(num_lines)
    num_lines = sum(1 for line in open(path_out))
    print "Output file has {0} lines".format(num_lines)



def three_prime_checker(sam_file):
    """ Code that divides the reads of a sam file between two new files according to nucleotide following
     the mapped three prime end of the read. If the nucleotide is not A the read is true and is saved in the
     correct reads file. If the nucleotide is A we have no means to know if the read has been correctly trimmed or not
     and it is saved in "shady" reads file."""

    #Opens the input files. SAM for mapped reads and fasta for template.
    sam = pysam.Samfile(raw_input("Enter the sam file path: "), "r")
    for fasta in SeqIO.parse(raw_input("Enter the path for your template sequence here: "), "fasta"):
        pass
    #output = raw_input("Give a name for output sam file: ")

    #output_ok = pysam.Samfile( "ok_" + output, "w", template = sam)
    #output_shady = pysam.Samfile("shady_" + output, "w", template = sam)
    #The output files between witch the data is divided.
    output_ok = pysam.Samfile( "ok_.sam" , "w", template = sam)
    output_shady = pysam.Samfile("shady_.sam" , "w", template = sam)

    """Code that divides the three prime seq reads according to nucleotide
    following the three prime end.
     Bacterial genome is circular and code takes this in account.
    If the read is negative and you map a read to start position of the template file then nucleotide downstream is the last
     position in template. If read is positive and
     its three prime end is the last position of the template, the following nucletodie will be first nucleotide of the template."""

    for read in sam: 
        if read.is_reverse == True: #Checks wether the read has positive or negative orientation
            if read.pos == 0: #Takes into account the circularity of bacterial DNA
                if fasta[-1] == "A":
                    output_shady.write(read)
                else:
                    output_ok.write(read)
            elif fasta[read.pos - 1] == "A":
                output_shady.write(read)
            else:
                output_ok.write(read)
        else:
            if (read.pos+ read.qlen) == len(fasta):
                if fasta[0] == "A":
                    output_shady.write(read)
                else:
                    output_ok.write(read)
            elif fasta[read.pos + read.qlen] == "A":
                output_shady.write(read)
            else:
                output_ok.write(read)
    print "3 prime divider has finished!"
            
    sam.close()
    output_ok.close()
    output_shady.close()